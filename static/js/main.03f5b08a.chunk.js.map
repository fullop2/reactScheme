{"version":3,"sources":["components/Console.jsx","index.js"],"names":["Container","styled","div","ConsoleBox","Console","props","state","currentInput","lines","inputHistoryIndex","inputHistory","inputPrefix","inputState","socket","WebSocket","window","location","protocol","consoleInput","React","onClickDisplay","bind","onKeyboardDown","this","focus","onopen","evt","onclose","writeToScreen","onmessage","data","msg","send","setState","outputData","string","e","currentLine","value","newFullLine","key","shiftKey","console","log","outputLines","map","line","onClick","onKeyDown","type","ref","readOnly","ReactDOM","render","document","getElementById"],"mappings":"+lBAIA,IAAMA,EAAYC,IAAOC,IAAV,KAOTC,EAAaF,IAAOC,IAAV,KA+HDE,E,kDAzGb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAfRC,MAAQ,CACNC,aAAe,GACfC,MAAQ,GAMRC,kBAAoB,EACpBC,aAAe,GACfC,YAAc,MACdC,WAAa,IAMb,EAAKC,OAAS,IAAIC,WAAwC,WAA7BC,OAAOC,SAASC,SAAwB,MAAQ,MAAQ,yBAErF,EAAKC,aAAeC,cACpB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAPN,E,gEAUE,IAAD,OACdE,KAAKL,aAAaM,QAElBD,KAAKV,OAAOY,OAAS,SAACC,KAItBH,KAAKV,OAAOc,QAAU,SAACD,GACnB,EAAKE,cAAc,iBAGvBL,KAAKV,OAAOgB,UAAY,SAACH,GACrB,EAAKE,cAAcF,EAAII,S,2BAI3BC,GACHR,KAAKV,OAAOmB,KAAKD,GACjBR,KAAKU,SAAS,CAACrB,YAAa,M,oCAGhBmB,GACZA,EAAMR,KAAKW,WAAWH,GADN,IAERvB,EAAUe,KAAKjB,MAAfE,MACRe,KAAKU,SAAS,CACZzB,MAAK,sBAAOA,GAAP,CAAcuB,IACnBnB,YAAa,M,iCAINuB,GACT,MAAQ,MAAQA,I,gCAERA,GACR,MAAQ,MAAQA,I,wCAEAA,GAChB,MAAQ,MAAQA,I,qCAGHC,GACbb,KAAKL,aAAaM,U,qCAGLY,GAAG,IAAD,EAC0Cb,KAAKjB,MAAxDC,EADS,EACTA,aAAcG,EADL,EACKA,aAAcF,EADnB,EACmBA,MAAOG,EAD1B,EAC0BA,YACnC0B,EAAcd,KAAKL,aAAaoB,MAChCC,EAAchC,EAAe,IAAM8B,EAE5B,UAAVD,EAAEI,MACAJ,EAAEK,SACHlB,KAAKU,SAAS,CACZ1B,aAAegC,EACf7B,aAAY,sBAAOA,GAAP,CAAqBH,IACjCI,YAAc,SAIhB+B,QAAQC,IAAIJ,GACZhB,KAAKU,SAAS,CACZ1B,aAAe,GACfI,YAAc,QAEhBY,KAAKS,KAAKO,IAGZhB,KAAKU,SAAS,CAACzB,MAAK,sBAAOA,GAAP,CAAcG,EAAc0B,MAChDd,KAAKL,aAAaoB,MAAQ,M,+BAIrB,IAAD,SAEqCf,KAAKjB,MAAxCE,EAFF,EAEEA,MAAOG,EAFT,EAESA,YAAaC,EAFtB,EAEsBA,WACtBgC,EAAcpC,EAAMqC,KAAI,SAAAC,GAAO,OAAQ,2BAAMA,MAEnD,OACA,gBAAC9C,EAAD,CACE+C,QAASxB,KAAKH,eACd4B,UAAWzB,KAAKD,gBAClB,kDACA,gBAACnB,EAAD,KACCyC,EACAjC,EACD,yBACEsC,KAAK,OACLC,IAAK,SAAAd,GAAI,EAAKlB,aAAekB,GAC7Be,SAAUvC,U,GAhHMO,aCZtBiC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,W","file":"static/js/main.03f5b08a.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport styled from \"styled-components\";\r\nimport './Console.css'\r\n\r\nconst Container = styled.div`\r\n  margin: 30px auto;\r\n  text-align: center;\r\n  font-weight: bold;\r\n\r\n`;\r\n\r\nconst ConsoleBox = styled.div`\r\n  margin: 30px auto;\r\n  text-align: left;\r\n  font-weight: normal;\r\n  color: #CCCC33;\r\n`;\r\n\r\nclass Console extends React.Component {\r\n  state = {\r\n    currentInput : '',\r\n    lines : [\r\n      // this.outputData(''),\r\n      // this.outputData('This is Scheme Project with React.'),\r\n      // this.outputData('From Programming Language 101 Lecture.'),\r\n      // this.outputData('')\r\n    ],\r\n    inputHistoryIndex : 0,\r\n    inputHistory : [],\r\n    inputPrefix : \">> \",\r\n    inputState : ''\r\n  };\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.socket = new WebSocket((window.location.protocol === 'https:' ? 'wss' : 'ws') + '://35.243.183.177:920');\r\n\r\n    this.consoleInput = React.createRef();\r\n    this.onClickDisplay = this.onClickDisplay.bind(this);\r\n    this.onKeyboardDown = this.onKeyboardDown.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n       this.consoleInput.focus();\r\n\r\n       this.socket.onopen = (evt)=>{\r\n           //doSend(\"test msg\");\r\n       };\r\n\r\n       this.socket.onclose = (evt)=>{\r\n           this.writeToScreen(\"disconnected\");\r\n       };\r\n\r\n       this.socket.onmessage = (evt)=>{\r\n           this.writeToScreen(evt.data);\r\n       }\r\n  }\r\n\r\n  send(msg){\r\n    this.socket.send(msg);\r\n    this.setState({inputState : true});\r\n  }\r\n\r\n  writeToScreen(msg){\r\n    msg = this.outputData(msg);\r\n    const { lines } = this.state;\r\n    this.setState({\r\n      lines : [...lines, msg],\r\n      inputState : false\r\n    });\r\n  }\r\n\r\n  outputData(string){\r\n    return ('=> ' + string );\r\n  }\r\n  inputData(string){\r\n    return ('>> ' + string );\r\n  }\r\n  continueInputData(string){\r\n    return ('.. ' + string );\r\n  }\r\n\r\n  onClickDisplay(e){\r\n    this.consoleInput.focus();\r\n  }\r\n\r\n  onKeyboardDown(e){\r\n    let { currentInput, inputHistory, lines, inputPrefix } = this.state;\r\n    const currentLine = this.consoleInput.value;\r\n    const newFullLine = currentInput + ' ' + currentLine;\r\n\r\n    if(e.key === 'Enter'){\r\n      if(e.shiftKey){\r\n        this.setState({\r\n          currentInput : newFullLine,\r\n          inputHistory : [...inputHistory, currentInput],\r\n          inputPrefix : '.. '\r\n        });\r\n      }\r\n      else{\r\n        console.log(newFullLine);\r\n        this.setState({\r\n          currentInput : '',\r\n          inputPrefix : '>> '\r\n        });\r\n        this.send(newFullLine);\r\n      }\r\n\r\n      this.setState({lines : [...lines, inputPrefix + currentLine]});\r\n      this.consoleInput.value = '';\r\n    }\r\n  }\r\n\r\n  render(){\r\n\r\n    const { lines, inputPrefix, inputState } = this.state;\r\n    const outputLines = lines.map(line=>{return (<div>{line}</div>);});\r\n\r\n    return (\r\n    <Container\r\n      onClick={this.onClickDisplay}\r\n      onKeyDown={this.onKeyboardDown}>\r\n    <h3>React Scheme Project</h3>\r\n    <ConsoleBox>\r\n    {outputLines}\r\n    {inputPrefix}\r\n    <input\r\n      type=\"text\"\r\n      ref={e=>{this.consoleInput = e;}}\r\n      readOnly={inputState}\r\n    />\r\n    </ConsoleBox>\r\n    </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Console;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Console from './components/Console'\n\nReactDOM.render(<Console />, document.getElementById('root'));\n\n"],"sourceRoot":""}